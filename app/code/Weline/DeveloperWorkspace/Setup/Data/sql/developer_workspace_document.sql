/*
 Navicat Premium Data Transfer

 Source Server         : 本地宝塔
 Source Server Type    : MySQL
 Source Server Version : 80025
 Source Host           : localhost:3306
 Source Schema         : weline

 Target Server Type    : MySQL
 Target Server Version : 80025
 File Encoding         : 65001

 Date: 01/09/2022 23:16:37
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for developer_workspace_document
-- ----------------------------
DROP TABLE IF EXISTS `developer_workspace_document`;
CREATE TABLE `developer_workspace_document`  (
  `id` smallint(0) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `category_id` smallint(0) NOT NULL COMMENT '分类ID',
  `title` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '标题',
  `summary` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '摘要',
  `author_id` smallint(0) NULL DEFAULT 0 COMMENT '作者ID',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '内容',
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 17 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '开发文章' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of developer_workspace_document
-- ----------------------------
INSERT INTO `developer_workspace_document` VALUES (8, 9, '创建控制器', '怎样快速创建WelineFramework框架模组控制器？', 1, '<p>首先创建一个模组，创建模组请参考<a title=\"怎样快速建立模组\" href=\"../../../../../dev/tool/document?id=7\" target=\"_blank\" rel=\"noopener\">怎样快速建立模组</a></p>\r\n<p>在etc/env.php文件数组中建立路由。</p>\r\n<pre><code><!--?php</code--><br /><br /><code>/*</code><br /><code> * 本文件由 秋枫雁飞 编写，所有解释权归Aiweline所有。</code><br /><code> * 邮箱：aiweline@qq.com</code><br /><code> * 网址：aiweline.com</code><br /><code> * 论坛：https://bbs.aiweline.com</code><br /><code> */</code><br /><br /><code>return [</code><br /><code>    \'router\'       =&gt; \'index\',//路由</code><br /><code>    \'dependencies\' =&gt; [</code><br /><code>    ]</code><br /><code>];</code></code></pre>\r\n<p>模组目录下创建Controller目录。子目录既是url的路径。</p>\r\n<p><span style=\"color: #e03e2d;\">例如：test/demo/index</span></p>\r\n<p><span style=\"color: #e03e2d;\">那么在目录中可以表现为：</span></p>\r\n<p><span style=\"color: #e03e2d;\">Controller\\test\\Demo.php</span></p>\r\n<p><span style=\"color: #e03e2d;\">剩余的index指的是Demo.php中的类index方法:</span></p>\r\n<p>创建任意名字的Controller类，继承类有FrontendController,BackendController,FrontendRestController,BackendRestController,所有控制器类型位于Weline\\Framework\\App\\Controller下。</p>\r\n<p><img src=\"../../../../../pub/media/wyswyg/Weline/DeveloperWorkspace/document/控制器目录.png\" alt=\"\" width=\"571\" height=\"180\" /></p>\r\n<p>FrontendController&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # 前端控制器</p>\r\n<p>BackendController&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# 后端控制器</p>\r\n<p>FrontendRestController&nbsp; &nbsp;# 前端rest api控制器</p>\r\n<p>BackendRestController&nbsp; &nbsp; # 后端resst api控制器</p>\r\n<p>&nbsp;</p>\r\n<p>示例：</p>\r\n<pre><code><!--?php</code--><br /><br /><code>declare(strict_types=1);</code><br /><br /><code>/*</code><br /><code> * 本文件由 秋枫雁飞 编写，所有解释权归Aiweline所有。</code><br /><code> * 邮箱：aiweline@qq.com</code><br /><code> * 网址：aiweline.com</code><br /><code> * 论坛：https://bbs.aiweline.com</code><br /><code> */</code><br /><br /><code>namespace Aiweline\\Index\\Controller;</code><br /><br /><code>use Weline\\Framework\\App\\Controller\\FrontendController;</code><br /><br /><code>class Upload extends FrontendController</code><br /><code>{</code><br /><code>    public function index()</code><br /><code>    {</code><br /><code>        return $this-&gt;fetch();</code><br /><code>    }</code><br /><code>}</code><br /><br />执行 php bin/w module:upgrade<br /><br />验证：<br /><img src=\"../../../../../pub/media/wyswyg/Weline/DeveloperWorkspace/document/控制器验证.png\" alt=\"\" width=\"3323\" height=\"1337\" /><br /><br /><br /><strong><span style=\"color: #ff0000;\">高级控制器玩法：</span></strong><br /><br />当你有很多代码冗余，或者需要初始化控制器的一些行为，可以设置一个BaseController,继承以上父控制器，然后再通过子控制器类实现。下面是例子：<br />比如在Weline_Admin模块中，使用了类似的功能。<br /><br /><img src=\"../../../../../pub/media/wyswyg/Weline/DeveloperWorkspace/document/Base控制器目录.png\" alt=\"\" width=\"533\" height=\"222\" /><br />BaseController控制器内指定了模板为html格式，（默认是phtml）</code></pre>\r\n<pre><code><!--?php</code--><br /><br /><code>declare(strict_types=1);</code><br /><br /><code>/*</code><br /><code> * 本文件由 秋枫雁飞 编写，所有解释权归Aiweline所有。</code><br /><code> * 邮箱：aiweline@qq.com</code><br /><code> * 网址：aiweline.com</code><br /><code> * 论坛：https://bbs.aiweline.com</code><br /><code> */</code><br /><br /><code>namespace Weline\\Admin\\Controller\\Template;</code><br /><br /><code>class BaseController extends \\Weline\\Admin\\Controller\\BaseController</code><br /><code>{</code><br /><code>    public function __init()</code><br /><code>    {</code><br /><code>        # 设置模板文件为html</code><br /><code>        $this-&gt;getTemplate()-&gt;setFileExt(\'html\');</code><br /><code>        parent::__init();</code><br /><code>    }</code><br /><code>}</code></code></pre>\r\n<pre><br /><br />看下Upzet.php，继承了这个BaseContrller控制器。</pre>\r\n<pre><code><!--?php</code--><br /><br /><code>declare(strict_types=1);</code><br /><br /><code>/*</code><br /><code> * 本文件由 秋枫雁飞 编写，所有解释权归Aiweline所有。</code><br /><code> * 邮箱：aiweline@qq.com</code><br /><code> * 网址：aiweline.com</code><br /><code> * 论坛：https://bbs.aiweline.com</code><br /><code> */</code><br /><br /><code>namespace Weline\\Admin\\Controller\\Template;</code><br /><br /><code>class Upzet extends BaseController</code><br /><code>{</code><br /><code>    public function index()</code><br /><code>    {</code><br /><code>        return $this-&gt;fetch($this-&gt;_request-&gt;getRule(\'template\'));</code><br /><code>    }</code><br /><code>}</code><br /><br /><span style=\"color: #e03e2d;\">可以看到，这个玩法只是把模板文件格式拓展名换了一下。</span></code></pre>', '2022-05-08 16:38:13', '2022-05-08 17:49:28');
INSERT INTO `developer_workspace_document` VALUES (9, 6, '模组安装，升级，卸载时处理数据', 'WelineFramework框架怎样在模组安装，升级，卸载时处理数据？', 1, '<p>Framework框架怎样在模组安装，升级，卸载时处理数据？</p>\r\n<p>框架支持在安装过程中初始化数据，以及在模块升级的时候对数据进行修改。比如安装模组的时候需要安装数据库表，升级时又需要对模块的数据进行迁移整改等。所以，正对此问题，框架解决了这两个问题。</p>\r\n<p>模组Module目录下的setup目录是专门处理这三个问题的目录，分别有Install,Upgrade,Remove三个文件。</p>\r\n<p><img src=\"../../../../../pub/media/wyswyg/Weline/DeveloperWorkspace/document/setup.png\" alt=\"\" width=\"620\" height=\"383\" /></p>\r\n<p>文件名是固定的，可以不写。</p>\r\n<p>Install,Upgrade,Remove三个文件文件分别继承PHP 接口类Weline\\Framework\\Setup\\InstallInterface,Weline\\Framework\\Setup\\UpgradeInterface,Weline\\Framework\\Setup\\RemoveInterface.</p>\r\n<p><span style=\"color: #e03e2d;\">重要提示：Install在首次安装时才执行，Upgrade在模组升级版本的时候会被触发，Remove在模块卸载时会触发。</span></p>\r\n<p>其中参数已在接口方法中给出，参数$setup可以操作数据库，获取打印类等，$context是上下文，可以判断模组Module的版本信息等。</p>\r\n<p>其余逻辑自行操作。</p>\r\n<p>&nbsp;</p>\r\n<p><strong><span style=\"color: #e03e2d;\">高级做法：</span></strong></p>\r\n<p>可以在Model中直接进行数据库创建。</p>\r\n<p>这个在模型Model中会给到，这里只说明一下怎么使用。</p>\r\n<p>Module模型的Model目录下是数据模型，继承Weline\\Framework\\Database\\Model类，则可以实现install,setup,upgrade三个函数</p>\r\n<p><span style=\"color: #e03e2d;\">重要提示：install在首次安装时才执行，setup如果在开发模式下每次执行php bin/w module:upgrade都会触发（非开发模式下并不会触发），upgrade在模组升级版本的时候会被触发。</span></p>\r\n<p>使用isntall来举个例子（安装的时候创建表）：</p>\r\n<pre><code>/**</code><br /><code> * @inheritDoc</code><br /><code> */</code><br /><code>public function install(ModelSetup $setup, Context $context): void</code><br /><code>{</code><br /><code>    if (!$setup-&gt;tableExist()) {</code><br /><code>        $setup-&gt;createTable(\'管理员表\')</code><br /><code>              -&gt;addColumn(self::fields_ID, TableInterface::column_type_INTEGER, 0, \'auto_increment primary key\', \'用户ID\')</code><br /><code>              -&gt;addColumn(self::fields_username, TableInterface::column_type_VARCHAR, 60, \'\', \'用户名\')</code><br /><code>              -&gt;addColumn(self::fields_password, TableInterface::column_type_VARCHAR, 255, \'\', \'密码\')</code><br /><code>              -&gt;addColumn(self::fields_avatar, TableInterface::column_type_VARCHAR, 255, \'\', \'头像\')</code><br /><code>              -&gt;addColumn(self::fields_login_ip, TableInterface::column_type_VARCHAR, 16, \'\', \'登录IP\')</code><br /><code>              -&gt;addColumn(self::fields_sess_id, TableInterface::column_type_VARCHAR, 32, \'\', \'管理员Session ID\')</code><br /><code>              -&gt;addColumn(self::fields_attempt_times, TableInterface::column_type_INTEGER, 0, \'default 0\', \'尝试登录次数\')</code><br /><code>              -&gt;addColumn(self::fields_attempt_ip, TableInterface::column_type_VARCHAR, 16, \'\', \'尝试登录IP\')</code><br /><code>              -&gt;create();</code><br /><br /><code>        # 初始化一个账户</code><br /><code>        /**@var AdminUser $adminUser */</code><br /><code>        $adminUser = ObjectManager::getInstance(AdminUser::class);</code><br /><code>        $adminUser-&gt;setUsername(\'秋枫雁飞\')-&gt;setPassword(\'admin\')-&gt;save();</code><br /><code>    }</code><br /><code>}</code><br /><br /><br />温馨提示：可以使用setup在开发模式下测试创建表来验证表的正确性。<br />示例（删除重建）：</pre>\r\n<pre><code>    /**</code><br /><code>     * @inheritDoc</code><br /><code>     */</code><br /><code>    public function setup(ModelSetup $setup, Context $context): void</code><br /><code>    {</code><br /><code>//        $setup-&gt;dropTable();</code><br /><code>//        $this-&gt;install($setup, $context);</code><br /><code>    }</code><br /><br /><br /></pre>', '2022-05-08 17:19:29', '2022-05-08 17:21:38');
INSERT INTO `developer_workspace_document` VALUES (10, 8, '创建', 'WelineFramework怎样创建数据模型Model?', 1, '<p>😇</p>\r\n<p>Model目录下创建类继承</p>\r\n<pre>\\Weline\\Framework\\Database\\Model</pre>\r\n<p>示例：</p>\r\n<pre><!--?php<br /--><br />declare(strict_types=1);<br /><br />/*<br /> * 本文件由 秋枫雁飞 编写，所有解释权归Aiweline所有。<br /> * 邮箱：aiweline@qq.com<br /> * 网址：aiweline.com<br /> * 论坛：https://bbs.aiweline.com<br /> */<br /><br />namespace Weline\\DeveloperWorkspace\\Model;<br /><br />use Weline\\Framework\\Database\\Api\\Db\\TableInterface;<br />use Weline\\Framework\\Http\\Url;<br />use Weline\\Framework\\Manager\\ObjectManager;<br />use Weline\\Framework\\Setup\\Data\\Context;<br />use Weline\\Framework\\Setup\\Db\\ModelSetup;<br /><br />class Document extends \\Weline\\Framework\\Database\\Model<br />{<br />    public const fields_ID          = \'id\';<br />    public const fields_TITLE       = \'title\';<br />    public const fields_summary     = \'summary\';<br />    public const fields_AUTHOR_ID   = \'author_id\';<br />    public const fields_CATEGORY_ID = \'category_id\';<br />//    public const fields_TAG_ID      = \'tag_id\';<br />    public const fields_CONTEND = \'content\';<br /><br />    /**<br />     * @inheritDoc<br />     */<br />    public function setup(ModelSetup $setup, Context $context): void<br />    {<br />//        $setup-&gt;dropTable();<br />        $this-&gt;install($setup, $context);<br />    }<br /><br />    /**<br />     * @inheritDoc<br />     */<br />    public function upgrade(ModelSetup $setup, Context $context): void<br />    {<br />        // TODO: Implement upgrade() method.<br />    }<br /><br />    /**<br />     * @inheritDoc<br />     */<br />    public function install(ModelSetup $setup, Context $context): void<br />    {<br />        $setup-&gt;getPrinting()-&gt;setup(\'安装数据表...\', $setup-&gt;getTable());<br />//        $setup-&gt;dropTable();<br />        if (!$setup-&gt;tableExist()) {<br />            $setup-&gt;createTable(\'开发文章\')<br />                  -&gt;addColumn(self::fields_ID, TableInterface::column_type_INTEGER, 0, \'primary key auto_increment \', \'ID\')<br />                  -&gt;addColumn(self::fields_CATEGORY_ID, TableInterface::column_type_INTEGER, 0, \'not null \', \'分类ID\')<br />                  -&gt;addColumn(self::fields_TITLE, TableInterface::column_type_VARCHAR, 120, \'not null\', \'标题\')<br />                  -&gt;addColumn(self::fields_summary, TableInterface::column_type_VARCHAR, 250, \'not null\', \'摘要\')<br />                  -&gt;addColumn(self::fields_AUTHOR_ID, TableInterface::column_type_INTEGER, 0, \'default 0\', \'作者ID\')<br />                  -&gt;addColumn(self::fields_CONTEND, TableInterface::column_type_TEXT, 0, \'not null\', \'内容\')<br />                  -&gt;create();<br />        } else {<br />            $setup-&gt;getPrinting()-&gt;setup(\'跳过安装数据表...\', $setup-&gt;getTable());<br />        }<br />    }<br /><br />    public function getTitle()<br />    {<br />        return $this-&gt;getData(self::fields_TITLE);<br />    }<br /><br />    public function setTitle(string $title): Document<br />    {<br />        return $this-&gt;setData(self::fields_TITLE, $title);<br />    }<br /><br />    public function getAuthorId()<br />    {<br />        return $this-&gt;getData(self::fields_AUTHOR_ID);<br />    }<br /><br />    public function setAuthorID(string|int $author_id): Document<br />    {<br />        return $this-&gt;setData(self::fields_AUTHOR_ID, $author_id);<br />    }<br /><br />//    public function getTagId()<br />//    {<br />//        return $this-&gt;getData(self::fields_TAG_ID);<br />//    }<br />//<br />//    public function setTagID(string|int $tag_id): Document<br />//    {<br />//        return $this-&gt;setData(self::fields_TAG_ID, $tag_id);<br />//    }<br /><br />    public function getContent()<br />    {<br />        return $this-&gt;getData(self::fields_CONTEND);<br />    }<br /><br />    public function setContent(string $content): Document<br />    {<br />        return $this-&gt;setData(self::fields_CONTEND, $content);<br />    }<br /><br />    public function setCategoryId(string $category_id): Document<br />    {<br />        return $this-&gt;setData(self::fields_CATEGORY_ID, $category_id);<br />    }<br /><br />    public function getCategoryId()<br />    {<br />        return $this-&gt;getData(self::fields_CATEGORY_ID);<br />    }<br /><br />    public function getUrl()<br />    {<br />        /**@var Url $url */<br />        $url = ObjectManager::getInstance(Url::class);<br />        return $url-&gt;build(\'/dev/tool/document\', [\'id\' =&gt; $this-&gt;getId()]);<br />    }<br /><br />    /**<br />     * @DESC          # 方法描述<br />     *<br />     * @AUTH    秋枫雁飞<br />     * @EMAIL aiweline@qq.com<br />     * @DateTime: 2022/4/19 22:36<br />     * 参数区：<br />     *<br />     * @param int $id<br />     *<br />     * @return Document[]<br />     */<br />    public function loadByCatalogId(int $id): array<br />    {<br />        return $this-&gt;where(self::fields_CATEGORY_ID, $id)-&gt;select()-&gt;fetch();<br />    }<br />}</pre>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>', '2022-05-08 17:27:25', '2022-05-08 17:31:00');
INSERT INTO `developer_workspace_document` VALUES (11, 8, '使用', 'WelineFramework框架模型如何使用？', 1, '<p>模型使用：</p>\r\n<p><span style=\"color: #e03e2d;\">load函数：</span></p>\r\n<pre>public function index()<br />{<br />    /**@var \\Weline\\DeveloperWorkspace\\Model\\Document $document*/<br />    $document = ObjectManager::getInstance(\\Weline\\DeveloperWorkspace\\Model\\Document::class);<br />    $this-&gt;assign(\'document\', $document-&gt;load($this-&gt;_request-&gt;getParam(\'id\')));<br />    return $this-&gt;fetch();<br />}</pre>\r\n<p>这个函数加载这个模型的主键查询这个数据。</p>\r\n<p>说明：\\Weline\\DeveloperWorkspace\\Model\\Document这个是文档模型，load加载了文档\\Weline\\DeveloperWorkspace\\Model\\Document模型中指定的主键</p>\r\n<p>以下是代码的一部分：</p>\r\n<pre>&lt;?php<br /><br />declare(strict_types=1);<br /><br />/*<br /> * 本文件由 秋枫雁飞 编写，所有解释权归Aiweline所有。<br /> * 邮箱：aiweline@qq.com<br /> * 网址：aiweline.com<br /> * 论坛：https://bbs.aiweline.com<br /> */<br /><br />namespace Weline\\DeveloperWorkspace\\Model;<br /><br />use Weline\\Framework\\Database\\Api\\Db\\TableInterface;<br />use Weline\\Framework\\Http\\Url;<br />use Weline\\Framework\\Manager\\ObjectManager;<br />use Weline\\Framework\\Setup\\Data\\Context;<br />use Weline\\Framework\\Setup\\Db\\ModelSetup;<br /><br />class Document extends \\Weline\\Framework\\Database\\Model<br />{<br />    <span style=\"color: #e03e2d;\">public const fields_ID          = \'id\';</span><br />    public const fields_TITLE       = \'title\';<br />    public const fields_summary     = \'summary\';<br />    public const fields_AUTHOR_ID   = \'author_id\';<br />    public const fields_CATEGORY_ID = \'category_id\';<br />    .....</pre>\r\n<p>我已经用红色文字标红，<span style=\"color: #e03e2d;\">fields_ID</span>是文档的主键字段，当你使用load的时候直接就是查询这个字段。</p>\r\n<p>save函数：</p>\r\n<p>这个函数可以保存数据也可以更新数据，主要是看当前模型实例对象中是否有主键，有主键则直接更新，没有则save会新增数据。</p>\r\n<p>来看一段控制器保存数据的示例代码：</p>\r\n<pre>public function postPost()<br />{<br />    # 保存<br />    /**@var \\Weline\\DeveloperWorkspace\\Model\\Document $documentModel */<br />    $documentModel = ObjectManager::getInstance(\\Weline\\DeveloperWorkspace\\Model\\Document::class);<br />    try {<br />        $pre_msg = __(\'添加\');<br />        if ($this-&gt;_request-&gt;getPost(\'id\')) {<br />            $pre_msg = __(\'修改\');<br />        }<br />        <span style=\"color: #e03e2d;\">$documentModel-&gt;save($this-&gt;_request-&gt;getPost());</span><br />        $this-&gt;getMessageManager()-&gt;addSuccess($pre_msg . \'文档成功！ID:\' . $documentModel-&gt;getId());<br />    } catch (\\Exception $exception) {<br />        $this-&gt;exception($exception);<br />    }<br />    $this-&gt;redirect($this-&gt;_url-&gt;build(\'dev/tool/admin/document\'));<br />}</pre>\r\n<p>相信一眼能后看明白，如果请求的post中有主键，那么save就是更新了，如果没有就是新增。</p>\r\n<p>查询：</p>\r\n<p>来看一段代码：</p>\r\n<pre>public function index()<br />{<br />    $documentModel = ModelService::getDocumentModel();<br />    <span style=\"color: #e03e2d;\">$documents     = $documentModel-&gt;joinModel(Catalog::class, \'<span style=\"color: #3598db;\">catalog</span>\', \'<span style=\"color: #3598db;\">main_table.category_id=catalog.id</span>\')</span><br /><span style=\"color: #e03e2d;\">                                   -&gt;fields(\'<span style=\"color: #3598db;\">main_table.*,main_table.id as doc_id,catalog.*,catalog.id as c_id,catalog.name as c_name</span>\')</span><br /><span style=\"color: #e03e2d;\">                                   -&gt;pagination(</span><br /><span style=\"color: #e03e2d;\">                                       intval($this-&gt;_request-&gt;getParam(\'page\', 1)),</span><br /><span style=\"color: #e03e2d;\">                                       intval($this-&gt;_request-&gt;getParam(\'pageSize\', 10)),</span><br /><span style=\"color: #e03e2d;\">                                       $this-&gt;_request-&gt;getParams()</span><br /><span style=\"color: #e03e2d;\">                                   )-&gt;select()-&gt;fetch();</span><br />    $this-&gt;assign(\'documents\', $documents);<br />    $this-&gt;assign(\'pagination\', $documentModel-&gt;getPagination());<br />    return $this-&gt;fetch();<br />}</pre>\r\n<p>可以看到，这个查询也很简单，链式查询，支持find,load,where,join,select等，具体请在</p>\r\n<pre>Weline\\Framework\\Database\\AbstractModel</pre>\r\n<p>和</p>\r\n<pre>Weline\\Framework\\Database\\Api\\Connection\\QueryInterface</pre>\r\n<p>中参考使用方法。</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>', '2022-05-08 17:48:01', '2022-05-08 17:48:01');
INSERT INTO `developer_workspace_document` VALUES (12, 9, '控制器类规则', 'WelineFramework框架控制器类规则', 1, '<p>控制器继承类后，本身类存在一些方法规则：</p>\r\n<p>示例：</p>\r\n<pre>&lt;?php<br /><br />declare(strict_types=1);<br /><br />/*<br /> * 本文件由 秋枫雁飞 编写，所有解释权归Aiweline所有。<br /> * 邮箱：aiweline@qq.com<br /> * 网址：aiweline.com<br /> * 论坛：https://bbs.aiweline.com<br /> */<br /><br />namespace Weline\\DeveloperWorkspace\\Controller;<br /><br />use Weline\\DeveloperWorkspace\\Helper\\Data;<br />use Weline\\Framework\\Manager\\ObjectManager;<br /><br />class Document extends \\Weline\\Framework\\App\\Controller\\FrontendController<br />{<br />    <span style=\"color: #e03e2d;\">public function index()</span><br />    {<br />        /**@var \\Weline\\DeveloperWorkspace\\Model\\Document $document*/<br />        $document = ObjectManager::getInstance(\\Weline\\DeveloperWorkspace\\Model\\Document::class);<br />        $this-&gt;assign(\'document\', $document-&gt;load($this-&gt;_request-&gt;getParam(\'id\')));<br />        return $this-&gt;fetch();<br />    }<br />}</pre>\r\n<p><span style=\"color: #e03e2d;\">访问方法限制：</span></p>\r\n<p>如果你想index使用post访问，可以将红色部分方法名写成<span style=\"color: #e03e2d;\">postIndex</span>。默认是没有限制的。</p>\r\n<p>&nbsp;</p>', '2022-05-08 17:54:30', '2022-05-08 17:54:30');
INSERT INTO `developer_workspace_document` VALUES (13, 10, '类', 'WelineFramework类规范', 1, '<p>框架中类的规范。</p>\r\n<p>__init()</p>\r\n<p>这是个类初始化函数，等同于__construct()函数，可写可不写，但是<span style=\"color: #e03e2d;\">必须使用ObjectManger::getInstance()容器才能识别</span>。</p>\r\n<p>__construct()</p>\r\n<p>在这个函数中可以初始化类。</p>\r\n<p>例子（一个事件观察者的代码）：</p>\r\n<pre>&lt;?php<br /><br />declare(strict_types=1);<br /><br />/*<br /> * 本文件由 秋枫雁飞 编写，所有解释权归Aiweline所有。<br /> * 邮箱：aiweline@qq.com<br /> * 网址：aiweline.com<br /> * 论坛：https://bbs.aiweline.com<br /> */<br /><br />namespace Weline\\Backend\\Observer;<br /><br />use Weline\\Backend\\Config\\MenuXmlReader;<br />use Weline\\Backend\\Model\\Menu;<br />use Weline\\Framework\\Event\\Event;<br /><br />class UpgradeMenu implements \\Weline\\Framework\\Event\\ObserverInterface<br />{<br /><span style=\"color: #e03e2d;\">    private \\Weline\\Backend\\Model\\Menu $menu;</span><br /><span style=\"color: #e03e2d;\">    private MenuXmlReader $menuReader;</span><br /><br /><span style=\"color: #e03e2d;\">    public function __construct(</span><br /><span style=\"color: #e03e2d;\">        \\Weline\\Backend\\Model\\Menu $menu,</span><br /><span style=\"color: #e03e2d;\">        MenuXmlReader $menuReader</span><br /><span style=\"color: #e03e2d;\">    ) {</span><br /><span style=\"color: #e03e2d;\">        $this-&gt;menu       = $menu;</span><br /><span style=\"color: #e03e2d;\">        $this-&gt;menuReader = $menuReader;</span><br /><span style=\"color: #e03e2d;\">    }</span><br /><br />    /**<br />     * @inheritDoc<br />     */<br />    public function execute(Event $event)<br />    {<br />        $modules_xml_menus = $this-&gt;menuReader-&gt;read();<br />        $this-&gt;menu-&gt;query(\'TRUNCATE TABLE \' . $this-&gt;menu-&gt;getTable());<br />        # 先更新顶层菜单<br />        foreach ($modules_xml_menus as $module =&gt; $menus) {<br />            foreach ($menus[\'data\'] as $key =&gt; $menu) {<br />                if (empty($menu[\'parent\'])) {<br />                    # 清空查询条件<br />                    $this-&gt;menu-&gt;clearData();<br />                    $menu[Menu::fields_MODULE]        = $module;<br />                    $menu[Menu::fields_PARENT_SOURCE] = $menu[\'parent\'] ?? \'\';<br />                    unset($menu[\'parent\']);<br />                    # 1 存在父资源 检查父资源的 ID<br />                    if (isset($menu[Menu::fields_PARENT_SOURCE]) &amp;&amp; $parent = $menu[Menu::fields_PARENT_SOURCE]) {<br />                        $parent = $this-&gt;menu-&gt;where(Menu::fields_SOURCE, $parent)-&gt;find()-&gt;fetch();<br />                        if ($pid = $parent-&gt;getId()) {<br />                            $menu[Menu::fields_PID] = $pid;<br />                        } else {<br />                            $menu[Menu::fields_PID] = 0;<br />                        }<br />                    }<br />                    $menu[Menu::fields_PID] = $menu[Menu::fields_PID]??0;<br />                    # 先查询一遍<br />                    /**@var Menu $menuModel */<br />                    $this-&gt;menu-&gt;clearData();<br />                    $menuModel = $this-&gt;menu-&gt;where(Menu::fields_NAME, $menu[Menu::fields_NAME])-&gt;find()-&gt;fetch();<br />                    # 保存时检测查询数据，存在则更新<br />                    if ($menuModel-&gt;getId()) {<br />                        $menu[Menu::fields_ID] = $menuModel-&gt;getId();<br />                    }<br />                    $menuModel-&gt;clearData();<br />                    $result = $menuModel-&gt;setData($menu)-&gt;forceCheck(true)-&gt;save();<br />                    # 2 检查自身是否被别的模块作为父分类<br />                    $menuModel-&gt;clearData();<br />                    if ($this_menu_id = $menuModel-&gt;getId() &amp;&amp; $is_others_parent = $menuModel-&gt;where(Menu::fields_PARENT_SOURCE, $menu[Menu::fields_SOURCE])-&gt;select()-&gt;fetch()) {<br />                        foreach ($is_others_parent as $other_menu) {<br />                            if (empty($other_menu[\'pid\'])) {<br />                                $other_menu[\'pid\'] = $this_menu_id;<br /><br />                                $menuModel-&gt;forceCheck(false)-&gt;setData(Menu::fields_ID, $other_menu[\'id\'])-&gt;save($other_menu);<br />                            }<br />                        }<br />                    }<br />                    unset($menus[\'data\'][$key]);<br />                }<br />            }<br />        }<br />        foreach ($modules_xml_menus as $module =&gt; $menus) {<br />            foreach ($menus[\'data\'] as $menu) {<br />                # 清空查询条件<br />                $this-&gt;menu-&gt;clearData();<br />                $menu[Menu::fields_MODULE]        = $module;<br />                $menu[Menu::fields_PARENT_SOURCE] = $menu[\'parent\'] ?? \'\';<br />                unset($menu[\'parent\']);<br />                # 1 存在父资源 检查父资源的 ID<br />                if (isset($menu[Menu::fields_PARENT_SOURCE]) &amp;&amp; $parent = $menu[Menu::fields_PARENT_SOURCE]) {<br />                    $parent = $this-&gt;menu-&gt;where(Menu::fields_SOURCE, $parent)-&gt;find()-&gt;fetch();<br />                    if ($pid = $parent-&gt;getData(\'id\')) {<br />                        $menu[Menu::fields_PID] = $pid;<br />                    } else {<br />                        $menu[Menu::fields_PID] = 0;<br />                    }<br />                }<br />                $menu[Menu::fields_PID] = $menu[Menu::fields_PID]??0;<br />                $result = $menuModel-&gt;setData($menu)-&gt;forceCheck(true)-&gt;save();<br />                # 2 检查自身是否被别的模块作为父分类<br />                $menuModel-&gt;clearData();<br />                if ($this_menu_id = $menuModel-&gt;getId() &amp;&amp; $is_others_parent = $menuModel-&gt;where(Menu::fields_PARENT_SOURCE, $menu[Menu::fields_SOURCE])-&gt;select()-&gt;fetch()) {<br />                    foreach ($is_others_parent as $other_menu) {<br />                        if (empty($other_menu[\'pid\'])) {<br />                            $other_menu[\'pid\'] = $this_menu_id;<br />                            $menuModel-&gt;forceCheck(false)-&gt;setData(Menu::fields_ID, $other_menu[\'id\'])-&gt;save($other_menu);<br />                        }<br />                    }<br />                }<br />            }<br />        }<br />    }<br />}</pre>\r\n<p>这个类的红色标注部分可以看到这种用法，同样<span style=\"color: #e03e2d;\">必须使用ObjectManger::getInstance()容器才能识别</span>,否则会报错。</p>', '2022-05-08 18:02:15', '2022-05-08 18:02:15');
INSERT INTO `developer_workspace_document` VALUES (14, 6, '缓存', 'WelineFramework框架怎么使用缓存？', 1, '<p>在模组的目录下创建Cache目录。</p>\r\n<p>Cache目录下创建一个类，继承</p>\r\n<pre>\\Weline\\Framework\\Cache\\CacheFactory</pre>\r\n<p>示例：</p>\r\n<pre><code>&lt;?php</code><br /><br /><code>/*</code><br /><code> * 本文件由 秋枫雁飞 编写，所有解释权归Aiweline所有。</code><br /><code> * 邮箱：aiweline@qq.com</code><br /><code> * 网址：aiweline.com</code><br /><code> * 论坛：https://bbs.aiweline.com</code><br /><code> */</code><br /><br /><code>namespace Weline\\Framework\\Event\\Cache;</code><br /><br /><code>/**</code><br /><code> * 文件信息</code><br /><code> * DESC:   |</code><br /><code> * 作者：   秋枫雁飞</code><br /><code> * 日期：   2021/1/24</code><br /><code> * 时间：   15:16</code><br /><code> * 网站：   https://bbs.aiweline.com</code><br /><code> * Email：  aiweline@qq.com</code><br /><code> * @DESC:    此文件源码由Aiweline（秋枫雁飞）开发，请勿随意修改源码！</code><br /><code> * @SuppressWarnings(PHPMD.NumberOfChildren)</code><br /><code> * @since 1.2</code><br /><code> *</code><br /><code> * Class EventCache</code><br /><code> * @package Weline\\Framework\\Event\\Cache</code><br /><code> * @since 100</code><br /><code> */</code><br /><code>class EventCache extends \\Weline\\Framework\\Cache\\CacheFactory</code><br /><code>{</code><br /><code>    public function __construct(string $identity = \'framework_event\')</code><br /><code>    {</code><br /><code>        parent::__construct($identity, \'事件缓存\', true);</code><br /><code>    }</code><br /><code>}</code></pre>\r\n<p>__construct()函数的第一个参数是缓存识别参数，第二个参数是缓存注释（可选），第三个参数是是否持久化（可选，如果选择需要持久化：true,那么使用命令php bin/w cache:clean需要加-f强制清理才能清理。也就是：php bin/w cache:clean -f）</p>\r\n<p>&nbsp;</p>', '2022-05-09 21:48:57', '2022-05-09 21:48:57');
INSERT INTO `developer_workspace_document` VALUES (15, 11, '事件说明及其作用', '什么是WelineFramework框架中的事件？有什么作用？', 1, '<p>什么是WelineFramework框架中的事件？有什么作用？</p>\r\n<p>事件：</p>\r\n<p>就是一段运行的代码中放了一个监听器，当代码运行到这个地方的时候会触发监听器，然后把资料总到事件处理器，如果这个事件有人监听，那么久使用这些数据搞些什么事情。至于搞什么，就看这个监听的人在想什么了。</p>\r\n<p>有什么作用？</p>\r\n<p>当然是能够让你在不用去修改源码的情况下能够修改数据啊。</p>', '2022-05-09 22:20:53', '2022-05-09 22:20:53');
INSERT INTO `developer_workspace_document` VALUES (16, 11, '声明一个事件观察者，创造一个事件', '怎样在WelineFramework框架中声明一个事件观察者？和创造一个事件供给其他人调用。', 1, '&lt;h1 style=&quot;color: #ff0000;&quot;&gt;&lt;strong&gt;声明事件前提：&lt;/strong&gt;&lt;/h1&gt;\r\n&lt;p&gt;因为你觉得这个数据可能别人会用到，并且会修改，所以你需要给别人留个修改数据或者利用数据干点什么（自由发挥）的机会，如果不想留就别声明了。&lt;/p&gt;\r\n&lt;h1 style=&quot;color: #ff0000;&quot;&gt;&lt;strong&gt;如何申明：&lt;/strong&gt;&lt;/h1&gt;\r\n&lt;p&gt;&lt;img src=&quot;../../../../../pub/media/wyswyg/Weline/DeveloperWorkspace/document/事件申明文件.png&quot; alt=&quot;&quot; width=&quot;602&quot; height=&quot;457&quot; /&gt;&lt;/p&gt;\r\n&lt;p&gt;和上图中所显示那样，在etc目录下面，写个event.xml文件。etc/event.xml文件内容如下：&lt;/p&gt;\r\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\r\n&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&amp;lt;config xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;        xs:noNamespaceSchemaLocation=&quot;urn:Weline_Framework::Event/etc/xsd/event.xsd&quot;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;        xmlns=&quot;urn:Weline_Framework::Event/etc/xsd/event.xsd&quot;&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;span style=&quot;color: #e03e2d;&quot;&gt;&lt;code&gt;    &amp;lt;event name=&quot;Framework_Module::module_upgrade&quot;&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #e03e2d;&quot;&gt;&lt;code&gt;        &amp;lt;observer name=&quot;Weline_Backend::menu_upgrade&quot; instance=&quot;Weline\\Backend\\Observer\\UpgradeMenu&quot; disabled=&quot;false&quot; shared=&quot;true&quot;/&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #e03e2d;&quot;&gt;&lt;code&gt;    &amp;lt;/event&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;br /&gt;&lt;code&gt;    &amp;lt;event name=&quot;Framework_Resource::compiler&quot;&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;        &amp;lt;observer name=&quot;Weline_Backend::compiler&quot; instance=&quot;Weline\\Backend\\Observer\\Compiler&quot; disabled=&quot;false&quot; shared=&quot;true&quot;/&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;    &amp;lt;/event&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;    &amp;lt;event name=&quot;Framework_View::header&quot;&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;        &amp;lt;observer name=&quot;Weline_Backend::header&quot; instance=&quot;Weline\\Backend\\Observer\\Header&quot; disabled=&quot;false&quot; shared=&quot;true&quot;/&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;    &amp;lt;/event&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;    &amp;lt;event name=&quot;Framework_View::footer&quot;&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;        &amp;lt;observer name=&quot;Weline_Backend::footer&quot; instance=&quot;Weline\\Backend\\Observer\\Footer&quot; disabled=&quot;false&quot; shared=&quot;true&quot;/&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;    &amp;lt;/event&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&amp;lt;/config&amp;gt;&lt;/code&gt;&lt;/pre&gt;\r\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\r\n&lt;!--?xml version=&quot;1.0&quot;?--&gt;\r\n&lt;p&gt;看到红色的文字没，那就是告诉Event事件管理器，我要接受Framework_Module::module_upgrade这个事件。&lt;/p&gt;\r\n&lt;p&gt;name&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;# 我要接受的事件名字&lt;/p&gt;\r\n&lt;p&gt;observer&amp;nbsp; &amp;nbsp; # 观察者,一样：name是观察者的名字，自己随便取一个，instance是观察者类，观察到代码执行到这里的时候，要干事的那个类，观察者可以不只是一个喔，可以一起分享，有几个就写几个observer&lt;/p&gt;\r\n&lt;p&gt;&lt;span style=&quot;color: #e03e2d;&quot;&gt;同样的，可以看到这个文件里除了红色部分，还可以申请很多个事件，每个事件又可以有很多观察者。&lt;/span&gt;&lt;/p&gt;\r\n&lt;p&gt;你可能会问Framework_Module::module_upgrade这个事件在哪里？&lt;/p&gt;\r\n&lt;h1 style=&quot;color: #ff0000;&quot;&gt;&lt;strong&gt;创造一个事件&lt;/strong&gt;&lt;/h1&gt;\r\n&lt;p&gt;下面是它所在的位置，你还可以看到他是怎么被创造的。&lt;/p&gt;\r\n&lt;pre&gt;&lt;code&gt;/**@var EventsManager $eventsManager */&lt;/code&gt;&lt;br /&gt;&lt;code&gt;$eventsManager = ObjectManager::getInstance(EventsManager::class);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;$eventsManager-&amp;gt;dispatch(&#039;Framework_Module::module_upgrade&#039;);&lt;/code&gt;&lt;/pre&gt;\r\n&lt;p&gt;当然，这个是不带数据的事件。让我们看看带数据的&lt;/p&gt;\r\n&lt;h1 style=&quot;color: #ff0000;&quot;&gt;&lt;strong&gt;一个完整的事件&lt;/strong&gt;&lt;/h1&gt;\r\n&lt;p&gt;一个完整的事件生成到申明注册观察者Observer再到观察者修改数据的过程。&lt;/p&gt;\r\n&lt;p&gt;&lt;strong&gt;第一步，生成事件：&lt;/strong&gt;&lt;/p&gt;\r\n&lt;pre&gt;&lt;code&gt;/**@var DataObject $installerPathData */&lt;/code&gt;&lt;br /&gt;&lt;code&gt;$installerPathData = ObjectManager::getInstance(DataObject::class);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;$installerPathData&lt;/code&gt;&lt;br /&gt;&lt;code&gt;    -&amp;gt;setData(&#039;installer&#039;, self::NAMESPACE . ucfirst($type) . &#039;\\Handle&#039;)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;    -&amp;gt;setData(&#039;register_arguments&#039;, $install_params);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;/**@var EventsManager $eventsManager */&lt;/code&gt;&lt;br /&gt;&lt;code&gt;$eventsManager = ObjectManager::getInstance(EventsManager::class);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;$eventsManager-&amp;gt;dispatch(&#039;Framework_Register::register_installer&#039;, [&#039;data&#039; =&amp;gt; $installerPathData]);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;span style=&quot;color: #e67e23;&quot;&gt;$installer_class = $installerPathData-&amp;gt;getData(&#039;installer&#039;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\r\n&lt;p&gt;&lt;span style=&quot;color: #e67e23;&quot;&gt;橙色是事件修改过的数据。&lt;/span&gt;&lt;/p&gt;\r\n&lt;p&gt;&lt;strong&gt;第二步，声明事件观察者&lt;/strong&gt;&lt;/p&gt;\r\n&lt;p&gt;申请一个带数据的对象实例化，然后传给事件管理器分发下去。&lt;/p&gt;\r\n&lt;p&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&amp;lt;config xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;xs:noNamespaceSchemaLocation=&quot;urn:Weline_Framework::Event/etc/xsd/event.xsd&quot;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;xmlns=&quot;urn:Weline_Framework::Event/etc/xsd/event.xsd&quot;&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&amp;lt;event name=&quot;Framework_phrase::get_words_file&quot;&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&amp;lt;observer name=&quot;Weline_I18n::get_words_file&quot; instance=&quot;Weline\\I18n\\Observer\\GetWordsFile&quot; disabled=&quot;false&quot; shared=&quot;true&quot;/&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&amp;lt;/event&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;span style=&quot;color: #e03e2d;&quot;&gt;&lt;code&gt;&amp;lt;event name=&quot;Framework_Register::register_installer&quot;&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #e03e2d;&quot;&gt;&lt;code&gt;&amp;lt;observer name=&quot;Weline_I18n::register_installer&quot; instance=&quot;Weline\\I18n\\Observer\\Register&quot; disabled=&quot;false&quot; shared=&quot;true&quot;/&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #e03e2d;&quot;&gt;&lt;code&gt;&amp;lt;/event&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;br /&gt;&lt;code&gt;&amp;lt;/config&amp;gt;&lt;/code&gt;&lt;/p&gt;\r\n&lt;p&gt;&lt;strong&gt;第三步，观察者修改数据&lt;/strong&gt;&lt;/p&gt;\r\n&lt;p&gt;我们使用&lt;/p&gt;\r\n&lt;pre&gt;Weline\\Theme\\Observer\\Register&lt;/pre&gt;\r\n&lt;p&gt;这个观察者来看源码：&lt;/p&gt;\r\n&lt;pre&gt;&lt;code&gt;&amp;lt;?php&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;&lt;code&gt;/*&lt;/code&gt;&lt;br /&gt;&lt;code&gt; * 本文件由 秋枫雁飞 编写，所有解释权归Aiweline所有。&lt;/code&gt;&lt;br /&gt;&lt;code&gt; * 邮箱：aiweline@qq.com&lt;/code&gt;&lt;br /&gt;&lt;code&gt; * 网址：aiweline.com&lt;/code&gt;&lt;br /&gt;&lt;code&gt; * 论坛：https://bbs.aiweline.com&lt;/code&gt;&lt;br /&gt;&lt;code&gt; */&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;&lt;code&gt;namespace Weline\\Theme\\Observer;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;&lt;code&gt;use Weline\\Framework\\DataObject\\DataObject;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;use Weline\\Framework\\Event\\Event;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;use Weline\\Framework\\Event\\ObserverInterface;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;use Weline\\Framework\\Register\\RegisterInterface;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;use Weline\\Theme\\Register\\Installer;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;&lt;code&gt;class Register implements ObserverInterface&lt;/code&gt;&lt;br /&gt;&lt;code&gt;{&lt;/code&gt;&lt;br /&gt;&lt;code&gt;    public function execute(Event $event)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;    {&lt;/code&gt;&lt;br /&gt;&lt;span style=&quot;color: #3598db;&quot;&gt;&lt;code&gt;        /**@var DataObject $data*/&lt;/code&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #3598db;&quot;&gt;&lt;code&gt;        $data           = $event-&amp;gt;getData(&#039;data&#039;);&lt;/code&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #3598db;&quot;&gt;&lt;code&gt;        $func_arguments = $data-&amp;gt;getData(&#039;register_arguments&#039;);&lt;/code&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #3598db;&quot;&gt;&lt;code&gt;        $type           = $func_arguments[0];&lt;/code&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #e03e2d;&quot;&gt;&lt;code&gt;        if ($type === RegisterInterface::THEME) {&lt;/code&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #e03e2d;&quot;&gt;&lt;code&gt;            $data-&amp;gt;setData(&#039;installer&#039;, Installer::class);&lt;/code&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #e03e2d;&quot;&gt;&lt;code&gt;            $data-&amp;gt;setData(&#039;register_arguments&#039;, $func_arguments);&lt;/code&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #e03e2d;&quot;&gt;&lt;code&gt;        }&lt;/code&gt;&lt;/span&gt;&lt;br /&gt;&lt;code&gt;    }&lt;/code&gt;&lt;br /&gt;&lt;code&gt;}&lt;/code&gt;&lt;/pre&gt;\r\n&lt;p&gt;Weline\\Theme\\Observer\\Register观察者先获取了数据（&lt;span style=&quot;color: #3598db;&quot;&gt;蓝色部分&lt;/span&gt;），修改数据（&lt;span style=&quot;color: #e03e2d;&quot;&gt;红色部分&lt;/span&gt;），至此第一步的橙色部分代码参数被观察这个Weline\\Theme\\Observer\\Register给修改了。&lt;/p&gt;\r\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\r\n&lt;p&gt;这个过程就介绍完了。更多的事件，请自行阅读源码，或者等待框架把事件列表所有事件写到管理界面，方便调用。&lt;/p&gt;\r\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\r\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;', '2022-05-09 22:37:12', '2022-05-09 23:54:35');

SET FOREIGN_KEY_CHECKS = 1;
